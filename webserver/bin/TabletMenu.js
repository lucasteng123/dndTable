// Generated by CoffeeScript 2.3.1
(function() {
  // External packages
  var OSC, TabletMenu, dataCharacters, dataMaps;

  OSC = require('osc-js');

  dataCharacters = require('../data/characters.json');

  dataMaps = require('../data/maps.json');

  TabletMenu = class TabletMenu {
    constructor() {
      var character, j, len, ref;
      this.remote = "";
      this.initiatives = ["defaulty"];
      this.characters = [];
      this.currentTurn = 0;
      ref = dataCharacters['PlayerCharacters'];
      for (j = 0, len = ref.length; j < len; j++) {
        character = ref[j];
        this.characters.push(character['name']);
      }
    }

    bindOSC(oRecv, oSend) {
      var bindRecv, i, j, results, self;
      this.oSend = oSend;
      self = this;
      bindRecv = function(route, func) {
        return oRecv.on(route, function(message) {
          // console.log message
          self.checkHost(message);
          func(message);
          return self.drawInitiatives();
        });
      };
      bindRecv('/image/change', function() {});
      bindRecv('/initiative/clear', function() {
        return self.initiatives = [];
      });
      bindRecv('/initiative/next', function() {
        if (self.currentTurn === null) {
          return self.currentTurn = 0;
        } else {
          return self.currentTurn = (self.currentTurn + 1) % self.initiatives.length;
        }
      });
// Bind commands to add a player to the initiative list
      results = [];
      for (i = j = 0; j <= 7; i = ++j) {
        results.push((function(i) {
          return bindRecv('/initiative/pc/' + i, function() {
            // Ignore: user clicks on blank label
            if (i >= self.characters.length) {
              return null;
            }
            // Add character name to initiatives list
            self.initiatives.push(self.characters[i]);
            return null;
          });
        })(i));
      }
      return results;
    }

    checkHost(message) {
      var i, j, ref, results;
      if (this.remote === "") {
        this.remote = "ip-will-go-here-eventually";
        results = [];
        for (i = j = 0, ref = this.characters.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          results.push(this.oSend.send(new OSC.Message('/initiative/labels/pc' + i, this.characters[i])));
        }
        return results;
      }
    }

    drawInitiatives() {
      var i, j;
      for (i = j = 0; j <= 11; i = ++j) {
        // Set initiative label accordingly
        if (i < this.initiatives.length) {
          this.oSend.send(new OSC.Message('/init/turnTracker/label/' + i, this.initiatives[i]));
        } else {
          // ... or as a blank label if nothing exists here
          this.oSend.send(new OSC.Message('/init/turnTracker/label/' + i, ""));
        }
        // Set turn indicator for this label
        this.oSend.send(new OSC.Message('/init/turnTracker/' + i, 0.9));
      }
      // '/init/turnTracker/'+i, if @currentTurn == i then 1 else 0
      return null;
    }

  };

  module.exports = TabletMenu;

}).call(this);
